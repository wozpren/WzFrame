@using WzFrame.Entity.Interfaces
@typeparam TItem where TItem : class, IEntityBase, new()
@inherits TabPageBase
@inject EntityService<TItem> entityService
@attribute [CascadingTypeParameter(nameof(TItem))]

<Table TItem="TItem" AutoGenerateColumns="@AutoGenerateColumns" class="table-demo"
       IsPagination="true" PageItemsSource="PageItemsSource"
       IsBordered="true" IsMultipleSelect="true" 
       FixedExtendButtonsColumn="@FixedExtendButtonsColumn"       
       ShowSkeleton="true" ShowToolbar="true" ShowEditButton="false" ShowSearch="true" ShowExtendButtons="true"
       OnQueryAsync="OnQueryAsync" OnSaveAsync="OnSaveAsync" OnDeleteAsync="OnDeleteAsync"
       EditTemplate="EditerTemplate!" TableColumns="TableColumnsTemplate!" RowButtonTemplate="RowButtonTemplate!">
</Table>


@code{
    [Parameter]
    public RenderFragment<TItem>? EditerTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem>? TableColumnsTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem>? RowButtonTemplate { get; set; }

    [Parameter]
    public bool FixedExtendButtonsColumn { get; set; }

    [Parameter]
    public bool AutoGenerateColumns { get; set; } = true;

    [Parameter]
    public Func<QueryPageOptions, Task<QueryData<TItem>>>? QueryAsync { get; set; }

    [Parameter]
    public Func<TItem, ItemChangedType, Task<bool>>? SaveAsync { get; set; }

    [Parameter]
    public Func<IEnumerable<TItem>, Task<bool>>? DeleteAsync { get; set; }

    protected IEnumerable<int> PageItemsSource => new int[] { 10, 20, 50, 100 };

    private bool IsShow = false;



    protected async Task<QueryData<TItem>> OnQueryAsync(QueryPageOptions options)
    {
        if (QueryAsync != null)
            return await QueryAsync(options);
        else
            return await entityService.QueryAsync(options);
    }

    protected async Task<bool> OnSaveAsync(TItem t, ItemChangedType changedType)
    {
        if (SaveAsync != null)
        {
            return await SaveAsync(t, changedType);
        }
        else
        {
            if (changedType == ItemChangedType.Update)
                return await entityService.UpdateAsync(t);
            else if (changedType == ItemChangedType.Add)
                return await entityService.AddAsync(t) > 0;
        }

        return true;
    }

    protected async Task<bool> OnDeleteAsync(IEnumerable<TItem> items)
    {
        if (DeleteAsync != null)
            return await DeleteAsync(items);
        else
            return await entityService.DeletesAsync(items);
    }



}