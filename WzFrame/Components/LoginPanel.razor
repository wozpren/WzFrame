@using Microsoft.AspNetCore.Identity
@inject ToastService ToastService
@inject AuthorizedService AuthorizedService
@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<div class="login-item login-item-gitee">
    @if (IsRegister)
    {
        <div class="login-header">
            <span>注册</span>
            @if (websiteConfig.SupportRegister)
            {
                <div class="login-register">
                    <a @onclick="SwitchPanel">返回登录</a>
                </div>
            }
        </div>
        <ValidateForm Model="@RegisterModel" OnValidSubmit="Register">
            <BootstrapInput TValue="string" @bind-Value="RegisterModel.Email" ShowLabel="false" PlaceHolder="请输入邮箱" />
            <BootstrapInput TValue="string" @bind-Value="RegisterModel.UserName" ShowLabel="false" PlaceHolder="请输入用户名" />
            <BootstrapPassword @bind-Value="RegisterModel.Password" ShowLabel="false" PlaceHolder="请输入密码" />
            <BootstrapPassword @bind-Value="RegisterModel.ConfirmPassword" ShowLabel="false" PlaceHolder="确认密码" />
            <Button ButtonType="ButtonType.Submit" Text="注册" Color="Color.Primary"></Button>
        </ValidateForm>
    }
    else
    {

    }

</div>


@code {
    [Parameter]
    public Func<EditContext, Task>? OnLogin { get; set; }

    [Parameter]
    public EventCallback<IdentityResult> OnRegisted { get; set; }

    [NotNull]
    protected WebsiteConfig? websiteConfig { get; set; }

    protected RegisterInput RegisterModel { get; set; } = new RegisterInput();


    protected bool IsRegister { get; set; }

    protected override void OnInitialized()
    {
        websiteConfig = AppSettings.Get<WebsiteConfig>();

    }

    private void SwitchPanel()
    {
        IsRegister = !IsRegister;
    }

    private async Task Register(EditContext editContext)
    {

        var user = new ApplicationUser
        {
            UserName = RegisterModel.UserName,
            Email = RegisterModel.Email
        };
        if (!UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            user.EmailConfirmed = true;
        }

        var result = await UserManager.CreateAsync(user, RegisterModel.Password);
        if (result.Succeeded)
        {
            SwitchPanel();
        }

        await OnRegisted.InvokeAsync(result);



    }
}
