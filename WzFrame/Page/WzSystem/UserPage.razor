@page "/system/user"
@using Microsoft.AspNetCore.Identity
@using SqlSugar
@using WzFrame.Shared.Repository

@inherits TabPageBase
@inject EntityRepository<ApplicationUser> entityRepository;
@attribute [MenuPageOption(102, "用户管理", ParentId = 100, Icon = "fas fa-users-line", Permission = "admin")]


<TablePageBase T="ApplicationUser" QueryAsync="OnQueryAsync" DeleteAsync="OnDeleteAsync" SaveAsync="OnSaveAsync">
    <RowButtonTemplate>
        <TableCellButton TItem="ApplicationUser" Icon="fa-fw fa-solid fa-pen-to-square" Text="角色" OnClick="() => SetRole(context)" Color="Color.Primary" />
    </RowButtonTemplate>
</TablePageBase>
<Modal>
    <HeadContent>
        <h5>设置角色</h5>
    </HeadContent>
</Modal>

@code {
    protected async Task<QueryData<ApplicationUser>> OnQueryAsync(QueryPageOptions options)
    {
        RefAsync<int> totalcount = 0;

        var data = await entityRepository.AsQueryable()
        .Includes(a => a.Roles)
        .ToPageListAsync(1, 10, totalcount);
        var result = new QueryData<ApplicationUser>()
            {
                Items = data,
                TotalCount = totalcount,
                IsFiltered = true,
                IsAdvanceSearch = true,
                IsSearch = true,
            };
        return result;

    }

    protected async Task<bool> OnSaveAsync(ApplicationUser user, ItemChangedType changedType)
    {
        if(changedType == ItemChangedType.Update)
        {
            user.SecurityStamp = Guid.NewGuid().ToString();
            return await entityRepository
            .Context
            .Updateable(user)
            .ExecuteCommandWithOptLockAsync() > 0;
        }
        else
        {
            
        }
        return false;
    }

    protected async Task<bool> OnDeleteAsync(IEnumerable<ApplicationUser> items)
    {
        return await entityRepository.Context
        .DeleteNav<ApplicationUser>(items.ToList())
        .Include(x => x.Roles, new DeleteNavOptions()
        {
            ManyToManyIsDeleteA = true
        })
        .ExecuteCommandAsync();
    }

    protected Task SetRole(ApplicationUser applicationUser)
    {
        return Task.CompletedTask;
    }
}