@using WzFrame.Entity.Work;
@page "/workshop/workerv2"
@inject EntityService<WorkerP> entityService
@inject IJSRuntime JSRuntime;
@inherits TabPageBase
@attribute [MenuPageOption(213, "工人管理", Icon = "fas fa-person-digging", ParentId = 200, Permission = "admin,workerv2")]


<TablePageBase FixedExtendButtonsColumn="true" TItem="WorkerP" SaveAsync="OnSaveAsync" QueryAsync="OnQueryAsync">
    <RowButtonTemplate>
        <TableCellButton Color="Color.Primary" Icon="fas fa-eye" Text="查看" OnClick="() =>Watch(context)" />
    </RowButtonTemplate>
    <TableColumnsTemplate>
        <TableColumn @bind-Field="@context.CertificateDate">
            <Template Context="vs">
                <span>@vs.Value.ToString("yyyy-MM-dd")</span>
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.ValidDate">
            <Template Context="vs">
                <span>@vs.Value.ToString("yyyy-MM-dd")</span>
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.CreateUser">
            <Template Context="vs">
                <span>vs?.Value?.UserName</span>
            </Template>
        </TableColumn>
    </TableColumnsTemplate>
</TablePageBase>

@code {

    protected async Task<QueryData<WorkerP>> OnQueryAsync(QueryPageOptions options)
    {
        RefAsync<int> totalcount = 0;

        var p = options.SearchText;

        var res = await entityService.entityRepository
            .AsQueryable()
            .WhereIF(!string.IsNullOrWhiteSpace(p), worker => worker.Name.Contains(p))
            .Includes(x => x.CreateUser)
            .OrderByDescending(x => x.Id)
            .ToPageListAsync(options.PageIndex, options.PageItems, totalcount);
        var data = new QueryData<WorkerP>
        {
            Items = res,               
            TotalCount = totalcount
        };

        return data;
    }

    protected async Task<bool> OnSaveAsync(WorkerP t, ItemChangedType changedType)
    {
        switch (changedType)
        {
            default:
            case ItemChangedType.Add:
                t.Belong = User?.Belong ?? "";
                return await entityService.AddAsync(t) > 0;
            case ItemChangedType.Update:
                t.Belong = User?.Belong ?? "";
                return await entityService.entityRepository.UpdateAsync(t);
        }
    }

    private async Task Watch(WorkerP worker)
    {
        await JSRuntime.InvokeVoidAsync("open", "http://futaloli.com/yuanhen/index.html?id=" + worker.Id, "_blank");
    }
}
