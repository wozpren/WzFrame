@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@using WzFrame.Entity.System
@using WzFrame.Entity.DTO
@inherits LayoutComponentBase
@inject BlazorService blazorService
@inject UserService UserService
@inject AuthenticationStateProvider StateProvider
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject HubService HubService
<BootstrapBlazorRoot>
<CascadingValue Value="MenuOptions">
        <CascadingValue Value="User">
            <div class="main-layout">
                <Layout ShowGotoTop="true" ShowCollapseBar="true" SideWidth="0"
                        IsPage="true" IsFullSide="@false" IsFixedHeader="@true"
                        TabDefaultUrl="/" UseTabSet="@true" IsOnlyRenderActiveTab="@true"
                        Menus="@Menus">
                    <Header>
                        <div class="header-bar">
                            <SlideButton style="height:auto;" Placement="Placement.BottomEnd" ShowHeader="false">
                                <ButtonTemplate>
                                    <Avatar IsCircle="true" IsBorder="true" Size="Size.Small" />
                                </ButtonTemplate>
                                <BodyTemplate>
                                    <div class="user-menu menu">
                                        <p class="p-2 fw-bold" style="margin-left: 6px;">@User?.UserName</p>
                                        <div class="submenu">
                                            <WMenuLink Url="/person" Text="个人中心" />
                                            <WMenuLink Url="/Account/Loginout" Text="退出登录" />
                                        </div>
                                    </div>
                                </BodyTemplate>
                            </SlideButton>
                        </div>
                    </Header>
                    <Side></Side>
                    <Main>
                        @Body
                    </Main>
                    <NotFound>
                        <p>404 Not Found</p>
                    </NotFound>
                    <NotAuthorized>
                        <RedirectToLogin />
                    </NotAuthorized>
                </Layout>
            </div>

        </CascadingValue>
    </CascadingValue>
</BootstrapBlazorRoot>

<div id="blazor-error-ui">
    出现了未处理的错误
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private List<MenuItem>? Menus { get; set; }

    private List<MenuOption>? MenuOptions { get; set; }

    private AuthenticationState? state;
    private UserMessage? User;

    private HubConnection? clientConnection;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await CheckSecurityStamp();

        await InitHub();
        SetConnectUser();

        Menus = BuildMenu(await blazorService.GetMenuOptionsTree(state));
        MenuOptions = blazorService.MenuOptions;
        StateHasChanged();
    }

    protected async Task CheckSecurityStamp()
    {
        state = await StateProvider.GetAuthenticationStateAsync();
        var applicationUser = await UserService.ValidateSecurityStampAsync(state.User);


        if (applicationUser == null)
        {
            NavigationManager.NavigateTo($"Account/Login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}", forceLoad: true);
        }
        else
        {
            User = applicationUser.Adapt<UserMessage>();
        }
    }

    private async Task InitHub()
    {
        clientConnection = new HubConnectionBuilder()
         .WithUrl(NavigationManager.ToAbsoluteUri("/client"))
         .Build();

        clientConnection.On<OnlineNotification>("ReceiveNotification", ReceiveNotification);
        clientConnection.On("Refresh", Refresh);

        await clientConnection.StartAsync();
    }

    public void SetConnectUser()
    {
        if (clientConnection != null && clientConnection.State == HubConnectionState.Connected && state != null)
            HubService.ConnectUser.TryAdd(clientConnection.ConnectionId!, state.User);
    }

    public void OnLogout()
    {
        NavigationManager.NavigateTo("Account/Login");
    }


    public void Refresh()
    {
        NavigationManager.Refresh();
    }

    public async Task ReceiveNotification(OnlineNotification notification)
    {
        await ToastService.Show(new ToastOption
            {
                Title = notification.Title,
                Content = notification.Content,
                Category = notification.Category                
            });

    }


    protected List<MenuItem> BuildMenu(List<MenuOption>? menus, MenuItem? parent = null)
    {

        if (menus == null)
        {
            return new List<MenuItem>();
        }

        menus.Sort((a, b) => a.Order - b.Order);

        var result = new List<MenuItem>();
        foreach (var menu in menus)
        {
            if (menu.Type == MenuType.Button)
            {
                continue;
            }
            var item = new MenuItem
            {
                Id = menu.Id.ToString(),
                Text = menu.Name,
                Icon = menu.Icon,
                Url = menu.Path,
            };
            if(menu.Children != null)
            {
                item.Items = BuildMenu(menu.Children.ToList(), item);
            }

            if(parent != null)
            {
                item.Parent = parent;
                item.ParentId = parent.Id;
            }


            result.Add(item);
        }

        return result;
    }
}